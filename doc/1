1. ---->   利用 gcc 内置函数，实现互斥锁(__sync_bool_compare_and_swap)
	gcc 提供了 bool __sync_bool_compare_and_swap (type *ptr, type oldval, type newval, ...)
	函数，可以利用它来实现锁。 该函数比较 oldval 和 *ptr。如果它们匹配，就把 newval 复制到
	*ptr。如果 oldval 和 *ptr 匹配，返回值是 True，否则是 False。


2. ---->   内存屏障( 无锁编程涉及到)

	由于CPU流水线的优化， 顺序执行的代码，可能真正执行不会顺序.
	如:  a = 1;
		 b = 2;
	
	当赋值a = 1 时，有可能缓存丢失(MISS), 这时候这个赋值先被存入缓冲，然后，先赋值b, b直接命中， 则就发生 第二条指令，先于第一条指令的情况。 (对于大部分情况，这没什么，但是多线程中，
有可能上下两个操作的顺序很重要，所以必须确保顺序执行)
	解决的办法，就是在两个赋值中间，加一个内存屏障。

	=========>		__sync_synchronize ()


